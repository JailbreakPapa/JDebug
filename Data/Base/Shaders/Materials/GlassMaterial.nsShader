[PLATFORMS]
ALL

[ PERMUTATIONS]
BLEND_MODE
RENDER_PASS

SHADING_MODE
BRDF_SHADING_MODEL = BRDF_SHADING_MODEL_NEW

BRDF_DIFFUSE
TWO_SIDED

FLIP_WINDING
FORWARD_PASS_WRITE_DEPTH

MSAA
CAMERA_MODE

SHADING_QUALITY
VERTEX_SKINNING
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX


[MATERIALPARAMETER]
Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;
Permutation BRDF_SHADING_MODEL;
Permutation BRDF_DIFFUSE;
Texture2D AlbedoTexture;
Color AlbedoColor@Default(Color(1.0, 1.0, 1.0));

Texture2D RoughnessTexture;
float Roughness@Default(0.15) @Clamp(0.0, 1.0);

Texture2D NormalMap;
float NormalStrength@Default(1.0) @Clamp(-16.0, 16.0);

Color EdgeColor@Default(Color(0.0, 0.0, 0.0));

[MATERIALCONFIG]

#include <Shaders/Materials/MaterialConfig.h>

[RENDERSTATE]
#include <Shaders/Materials/MaterialState.h>

[SHADER]

#include <Shaders/Common/GlobalConstants.h>

CONSTANT_BUFFER(nsMaterialConstants, 1)
{
 COLOR4F(AlbedoColor);
 FLOAT1(Roughness);
 FLOAT1(NormalStrength);
 COLOR4F(EdgeColor);
};

[VERTEXSHADER]
#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
    return FillVertexData(Input);
}

[GEOMETRYSHADER]
#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif
#include <Shaders/Materials/MaterialStereoGeometryShader.h>

[PIXELSHADER]
#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_EMISSIVE
#define USE_MATERIAL_OCCLUSION
#define USE_MATERIAL_SPECULAR_CLEARCOAT
#define USE_TWO_SIDED_LIGHTING
#define USE_DECALS
#define USE_FOG

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif


#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D AlbedoTexture;
SamplerState AlbedoTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

Texture2D NormalMap;
SamplerState NormalMap_AutoSampler;

float SchlickFresnel(float u)
{
    float m = 1.0 - u;
    float m2 = m * m;
    return m2 * m2 * m;
}

float3 GetBaseColor()
{
    float3 baseColor = AlbedoColor.rgb * GetInstanceData().Color.rgb;
    float4 albedo = AlbedoTexture.Sample(AlbedoTexture_AutoSampler, G.Input.TexCoord0.xy) * float4(baseColor, AlbedoColor.a);

    float VdotN = dot(GetCameraDirForwards(), G.Input.Normal);
    float fresnel = clamp(SchlickFresnel(VdotN), 0.0, 1.0);

    float a = lerp(0.001, 1.0, albedo.a);
    float alpha = lerp(fresnel * EdgeColor.a, 1.0, a);
    baseColor = lerp(EdgeColor.rgb * EdgeColor.a, albedo.rgb, a);

    return baseColor;
}

float3 GetNormal()
{
    float3 normalTS = DecodeNormalTexture(NormalMap.Sample(NormalMap_AutoSampler, G.Input.TexCoord0.xy));
    return TangentToWorldSpace(normalTS * NormalStrength);
}

float GetMetallic()
{
    return 0.0f; // Non-metallic
}

float GetReflectance()
{
    return 0.5f; // Default reflectance
}

float GetRoughness()
{
    float roughness = Roughness * RoughnessTexture.Sample(RoughnessTexture_AutoSampler, G.Input.TexCoord0.xy).r;
    return roughness;
}

float GetOpacity()
{
    return 1.0f; // Opaque
}

float3 GetEmissiveColor()
{
    return 0.0f; // No emission
}

float GetOcclusion()
{
    return 1.0f; // No occlusion
}