[PLATFORMS]
ALL

[PERMUTATIONS]

BLOOM_PASS_MODE
CAMERA_MODE
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[RENDERSTATE]

DepthTest = false
DepthWrite = false
CullMode = CullMode_None

[VERTEXSHADER]

#include <Shaders/Pipeline/FullscreenTriangleVertexShader.h>

[GEOMETRYSHADER]

#include <Shaders/Pipeline/FullscreenTriangleStereoGeometryShader.h>

[PIXELSHADER]

#include <Shaders/Pipeline/FullscreenTriangleInterpolator.h>
#include <Shaders/Common/Common.h>
#include <Shaders/Common/GlobalConstants.h>
#include "BloomConstants.h"

#if BLOOM_PASS_MODE == BLOOM_PASS_MODE_UPSCALE
  Texture2DArray NextColorTexture;
#endif

Texture2DArray ColorTexture;

#if BLOOM_PASS_MODE == BLOOM_PASS_MODE_UPSCALE
  #define NUM_SAMPLES 9
#elif BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE_FAST || BLOOM_PASS_MODE == BLOOM_PASS_MODE_DOWNSCALE_FAST
  #define NUM_SAMPLES 9
#else
  #define NUM_SAMPLES 13
#endif

#define MAX_COLOR_VALUE 64.0f

float4 main(PS_IN Input) : SV_Target
{
  #if CAMERA_MODE == CAMERA_MODE_STEREO
    s_ActiveCameraEyeIndex = Input.RenderTargetArrayIndex;
  #endif

  #if BLOOM_PASS_MODE == BLOOM_PASS_MODE_UPSCALE
    float3 offsetAndWeights[NUM_SAMPLES] =
    {
      float3( 0.0f,  0.0f, 4.0f / 16.0f),
      float3(-1.0f,  0.0f, 2.0f / 16.0f),
      float3( 1.0f,  0.0f, 2.0f / 16.0f),
      float3( 0.0f, -1.0f, 2.0f / 16.0f),
      float3( 0.0f,  1.0f, 2.0f / 16.0f),
      float3(-1.0f,  1.0f, 1.0f / 16.0f),
      float3( 1.0f,  1.0f, 1.0f / 16.0f),
      float3(-1.0f, -1.0f, 1.0f / 16.0f),
      float3( 1.0f, -1.0f, 1.0f / 16.0f)
    };

    float3 color = NextColorTexture.SampleLevel(LinearClampSampler, float3(Input.TexCoord0.xy, s_ActiveCameraEyeIndex), 0.0).rgb * TintColor.rgb;

  #elif BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE_FAST || BLOOM_PASS_MODE == BLOOM_PASS_MODE_DOWNSCALE_FAST
    float3 offsetAndWeights[NUM_SAMPLES] =
    {
      float3( 0.0f,      0.0f,     4.0f / 16.0f),
      float3(-0.875f,    0.0f,     2.0f / 16.0f),
      float3( 0.875f,    0.0f,     2.0f / 16.0f),
      float3( 0.0f,     -0.875f,   2.0f / 16.0f),
      float3( 0.0f,      0.875f,   2.0f / 16.0f),
      float3(-0.85256f,  0.85256f, 1.0f / 16.0f),
      float3( 0.85256f,  0.85256f, 1.0f / 16.0f),
      float3(-0.85256f, -0.85256f, 1.0f / 16.0f),
      float3( 0.85256f, -0.85256f, 1.0f / 16.0f)
    };

    float3 color = 0.0f;

  #else
    float3 offsetAndWeights[NUM_SAMPLES] =
    {
      float3( 0.0f,  0.0f, 4.0f / 32.0f),
      float3(-0.5f,  0.5f, 4.0f / 32.0f),
      float3( 0.5f,  0.5f, 4.0f / 32.0f),
      float3(-0.5f, -0.5f, 4.0f / 32.0f),
      float3( 0.5f, -0.5f, 4.0f / 32.0f),
      float3(-1.0f,  0.0f, 2.0f / 32.0f),
      float3( 1.0f,  0.0f, 2.0f / 32.0f),
      float3( 0.0f, -1.0f, 2.0f / 32.0f),
      float3( 0.0f,  1.0f, 2.0f / 32.0f),
      float3(-1.0f,  1.0f, 1.0f / 32.0f),
      float3( 1.0f,  1.0f, 1.0f / 32.0f),
      float3(-1.0f, -1.0f, 1.0f / 32.0f),
      float3( 1.0f, -1.0f, 1.0f / 32.0f)
    };

    float3 color = 0.0f;
  #endif

  float totalWeight = 0.0f;

  for (uint i = 0; i < NUM_SAMPLES; ++i)
  {
    float2 texCoord = offsetAndWeights[i].xy * PixelSize + Input.TexCoord0.xy;

    float3 sampleColor = ColorTexture.SampleLevel(LinearClampSampler, float3(texCoord, s_ActiveCameraEyeIndex), 0.0).rgb;
    float weight = offsetAndWeights[i].z;

    #if BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE || BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE_FAST
      float luminance = GetLuminance(sampleColor) * Exposure;
      weight *= 1.0f / (1.0f + luminance);
    #endif

    color += sampleColor * weight;
    totalWeight += weight;
  }

  color /= max(totalWeight, 0.00001f);

  #if BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE || BLOOM_PASS_MODE == BLOOM_PASS_MODE_INITIAL_DOWNSCALE_FAST
    float luminance = GetLuminance(color) * Exposure;
    float thresholdedLuminance = saturate(luminance - BloomThreshold);
    float intensity = thresholdedLuminance * BloomIntensity;

    color *= intensity;

    // keep colors in reasonable range
    float maxValue = max(max(color.r, color.g), color.b);
    if (maxValue > MAX_COLOR_VALUE)
    {
      color *= MAX_COLOR_VALUE / maxValue;
    }

    // tone down the screen edges a bit
    float2 centeredCoords = Input.TexCoord0.xy - 0.5f;
    float distance = dot(centeredCoords, centeredCoords);
    float vignette = saturate(-2.4f * distance + 1.4f);
    vignette *= vignette;

    color *= vignette;
  #endif

  #if BLOOM_PASS_MODE != BLOOM_PASS_MODE_UPSCALE
    color *= TintColor.rgb;
  #endif

  return float4(color, 1.0f);
}
